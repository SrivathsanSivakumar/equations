import 'package:equations/equations.dart';
import 'package:equations_solver/blocs/system_solver/system_solver.dart';
import 'package:test/test.dart';

// ignore_for_file: prefer_const_constructors

/// The coverage report generated by `flutter test --coverage` doesn't take into
/// account those lines where a `const` constructor has a call to `super`. This
/// is something expected by the VM so very likely this behavior won't change.
///
/// In order to achieve 100% code coverage, this file calls some constructors
/// containing `super` calls **WITHOUT** the `const` keyword. In this way, the
/// coverage report tool can mark as "covered" even constructors with `super`
/// calls.
void main() {
  group('Testing constructors of the classes', () {
    test('Bloc events and states', () {
      expect(
        RowReductionMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<RowReductionMethod>(),
      );
      expect(
        FactorizationMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<FactorizationMethod>(),
      );
      expect(
        IterativeMethod(
          matrix: const [],
          knownValues: const [],
          size: 1,
        ),
        isA<IterativeMethod>(),
      );
      expect(
        SystemGuesses(
          systemSolver: LUSolver.flatMatrix(
            equations: const [],
            constants: const [],
          ),
          solution: const [],
        ),
        isA<SystemGuesses>(),
      );
      expect(
        SystemError(),
        isA<SystemError>(),
      );
      expect(
        SystemNone(),
        isA<SystemNone>(),
      );
      expect(
        SystemClean(),
        isA<SystemClean>(),
      );
      expect(
        SingularSystemError(),
        isA<SingularSystemError>(),
      );
    });
  });
}
